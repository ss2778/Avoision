00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/14/2024 6:04:03 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Character
00000000                             3  * Written by : Brandon Holtzman
00000000                             4  * Date       : 10/6/24
00000000                             5  * Description: Character 'class' for assembly game
00000000                             6  *-----------------------------------------------------------
00000000  =00000016                  7  CHAR_SIZE                    EQU  22
00000000  =00000000                  8  CHAR_X_POS_OFFSET            EQU  0
00000000  =00000002                  9  CHAR_Y_POS_OFFSET            EQU  2
00000000  =00000004                 10  CHAR_FP_Y_POS_OFFSET         EQU  4
00000000  =00000006                 11  CHAR_Y_VEL_OFFSET            EQU  6
00000000  =00000008                 12  CHAR_LIFE_OFFSET             EQU  8
00000000  =0000000A                 13  CHAR_HALF_HEIGHT_OFFSET      EQU  10
00000000  =0000000C                 14  CHAR_HALF_WIDTH_OFFSET       EQU  12
00000000  =0000000E                 15  CHAR_CENTER_X_OFFSET         EQU  14
00000000  =00000010                 16  CHAR_CENTER_Y_OFFSET         EQU  16
00000000  =00000012                 17  CHAR_ART_ADDR_OFFSET         EQU  18
00000000                            18  
00000000  =00000003                 19  CHAR_MOVE_SPEED              EQU  3
00000000  =00000057                 20  CHAR_W_KEY                   EQU  $57
00000000  =00000041                 21  CHAR_A_KEY                   EQU  $41
00000000  =00000044                 22  CHAR_D_KEY                   EQU  $44
00000000  =00000013                 23  GET_USER_INPUT               EQU  19
00000000  =00000012                 24  CHAR_WIDTH_OFFSET            EQU  $12
00000000  =00000016                 25  CHAR_HEIGHT_OFFSET           EQU  $16
00000000                            26  * CHAR_JUMP_SPEED is in 12.4 fixed point format
00000000  =00000077                 27  CHAR_JUMP_SPEED              EQU  $77
00000000                            28  *---
00000000                            29  * Creates an instance of the character
00000000                            30  * 
00000000                            31  * a1 - start address of filename
00000000                            32  *
00000000                            33  * out a0 - start address of character in memory
00000000                            34  * out d0.b - 0 = success, non-zero = failure
00000000                            35  *---
00000000                            36  char_createChar:
00000000                            37  .REGS  REG A2
00000000  48E7 0020                 38      movem.l .REGS, -(sp)
00000004                            39      * Store file name
00000004  2449                      40      move.l a1, a2
00000006                            41      * allocate memory for the character object
00000006  7216                      42      move.l #CHAR_SIZE, d1
Line 43 ERROR: Undefined symbol
00000008  6100 BD0C                 43      bsr mem_Alloc
0000000C  4A00                      44      tst.b d0
0000000E  6600 005C                 45      bne .error
00000012  224A                      46      move.l a2, a1
00000014  2448                      47      move.l a0, a2
00000016                            48      * load the character art into memory
Line 49 ERROR: Undefined symbol
00000016  6100 BCFE                 49      bsr bmp_Load
0000001A  4A00                      50      tst.b d0
0000001C  6600 004E                 51      bne .error
00000020  2548 0012                 52      move.l a0, CHAR_ART_ADDR_OFFSET(a2)
00000024                            53      * initialize values
00000024  357C 0140 0000            54      move.w #320, CHAR_X_POS_OFFSET(a2)
0000002A  357C 00F0 0002            55      move.w #240, CHAR_Y_POS_OFFSET(a2)
00000030  357C 0000 0006            56      move.w #0, CHAR_Y_VEL_OFFSET(a2)
00000036  357C 0F00 0004            57      move.w #$F00, CHAR_FP_Y_POS_OFFSET(a2)
0000003C  3028 0012                 58      move.w CHAR_WIDTH_OFFSET(a0), d0
00000040                            59      * divide by 2
00000040  E248                      60      lsr.w #1, d0
00000042  3540 000C                 61      move.w d0, CHAR_HALF_WIDTH_OFFSET(a2)
00000046  5240                      62      add.w #1, d0
00000048  3540 000E                 63      move.w d0, CHAR_CENTER_X_OFFSET(a2)
0000004C  3028 0016                 64      move.w CHAR_HEIGHT_OFFSET(a0), d0
00000050                            65      * divide by 2
00000050  E248                      66      lsr.w #1, d0
00000052  3540 000A                 67      move.w d0, CHAR_HALF_HEIGHT_OFFSET(a2)
00000056  5240                      68      add.w #1, d0
00000058  3540 0010                 69      move.w d0, CHAR_CENTER_Y_OFFSET(a2)
0000005C  357C 0003 0008            70      move.w #3, CHAR_LIFE_OFFSET(a2)
00000062  204A                      71      move.l a2, a0
00000064  103C 0000                 72      move.b #0, d0
00000068  6000 0006                 73      bra .done
0000006C                            74  .error
0000006C  103C 0001                 75      move.b #1, d0
00000070                            76  .done
00000070  4CDF 0400                 77      movem.l (sp)+, .REGS
00000074  4E75                      78      rts
00000076                            79  
00000076                            80  
00000076                            81  *---
00000076                            82  * Draws the background over the character's current position
00000076                            83  * 
00000076                            84  * a3 - start address of character to erase
00000076                            85  * a2 - start address of the background image
00000076                            86  *---   
00000076                            87  char_erase:
00000076                            88  .REGS  REG D2-D4
00000076  48E7 3800                 89      movem.l .REGS, -(sp)
0000007A                            90      * draw the background with a crop and position of the character's location
0000007A  206B 0012                 91      move.l CHAR_ART_ADDR_OFFSET(a3), a0
0000007E  322B 0000                 92      move.w CHAR_X_POS_OFFSET(a3), d1
00000082  4841                      93      swap d1
00000084  322B 0002                 94      move.w CHAR_Y_POS_OFFSET(a3), d1
00000088  2001                      95      move.l d1, d0
0000008A  224A                      96      move.l a2, a1
0000008C  3428 0012                 97      move.w CHAR_WIDTH_OFFSET(a0), d2
00000090  4842                      98      swap d2
00000092  3428 0016                 99      move.w CHAR_HEIGHT_OFFSET(a0), d2
Line 100 ERROR: Undefined symbol
00000096  6100 BC7E                100      bsr bmp_Draw
0000009A  4CDF 001C                101      movem.l (sp)+, .REGS
0000009E  4E75                     102      rts
000000A0                           103  
000000A0                           104  *---
000000A0                           105  * Draws the background over the character's current position
000000A0                           106  * 
000000A0                           107  * a3 - start address of character to erase
000000A0                           108  *
000000A0                           109  *---   
000000A0                           110  char_draw:
000000A0                           111  .REGS  REG D2-D4
000000A0  48E7 3800                112      movem.l .REGS, -(sp)
000000A4                           113      * draw the background with a crop and position of the character's location
000000A4  226B 0012                114      move.l CHAR_ART_ADDR_OFFSET(a3), a1
000000A8  322B 0000                115      move.w CHAR_X_POS_OFFSET(a3), d1
000000AC  4841                     116      swap d1
000000AE  322B 0002                117      move.w CHAR_Y_POS_OFFSET(a3), d1
000000B2  7000                     118      move.l #0, d0
Line 119 ERROR: Undefined symbol
000000B4  3429 BD16                119      move.w WIDTH_OFFSET(a1), d2
000000B8  4842                     120      swap d2
Line 121 ERROR: Undefined symbol
000000BA  3429 BD16                121      move.w HEIGHT_OFFSET(a1), d2
Line 122 ERROR: Undefined symbol
000000BE  6100 BC56                122      bsr bmp_Draw
000000C2  4CDF 001C                123      movem.l (sp)+, .REGS
000000C6  4E75                     124      rts
000000C8                           125  
000000C8                           126  *---
000000C8                           127  * Moves the character based on player input.
000000C8                           128  * Draws the character to their new position on screen.
000000C8                           129  * Left movement is prioritized over right movement.
000000C8                           130  * 
000000C8                           131  * a3 - start address of character to move
000000C8                           132  *
000000C8                           133  *---
000000C8                           134  char_Move:
000000C8                           135  .REGS  REG D2-D4
000000C8  48E7 3800                136      movem.l .REGS, -(sp)
000000CC                           137      * check what movement keys are pressed
000000CC  223C 00574144            138      move.l #(CHAR_W_KEY<<16 + CHAR_A_KEY<<8 + CHAR_D_KEY), d1
000000D2  103C 0013                139      move.b #GET_USER_INPUT, d0
000000D6  4E4F                     140      trap #15
000000D8                           141      * compare result to immediates to determine inputs
000000D8  2401                     142      move.l d1, d2
000000DA                           143      
000000DA                           144      * get the character width
000000DA  206B 0012                145      move.l CHAR_ART_ADDR_OFFSET(a3), a0
000000DE  3028 0012                146      move.w CHAR_WIDTH_OFFSET(a0), d0
000000E2                           147      * determine the right border of movement
Line 148 ERROR: Undefined symbol
000000E2  363C BD16                148      move.w #RIGHT_WALL, d3
000000E6  9640                     149      sub.w d0, d3
000000E8  302B 0000                150      move.w CHAR_X_POS_OFFSET(a3), d0
000000EC                           151      * left movement check
000000EC  0282 0000FF00            152      andi.l #$0000FF00, d2
000000F2  6700 0016                153      beq .postLeft
000000F6                           154      * move character left
000000F6  5740                     155      sub.w #CHAR_MOVE_SPEED, d0
000000F8                           156      * make sure the character is in bounds of the room
Line 157 ERROR: Undefined symbol
000000F8  B07C BD16                157      cmp.w #LEFT_WALL, d0
000000FC  6E00 0022                158      bgt .postMove
Line 159 ERROR: Undefined symbol
00000100  303C BD16                159      move.w #LEFT_WALL, d0
00000104  5240                     160      add.w #1, d0
00000106  6000 0018                161      bra .postMove
0000010A                           162  .postLeft
0000010A                           163      * right movement check
0000010A  2401                     164      move.l d1, d2
0000010C  0282 000000FF            165      andi.l #$000000FF, d2
00000112  6700 000C                166      beq .postMove
00000116                           167      * move character right
00000116  5640                     168      add.w #CHAR_MOVE_SPEED, d0
00000118                           169      * make sure the character is in bounds of the room
00000118  B043                     170      cmp.w d3, d0
0000011A  6F00 0004                171      ble .postMove
0000011E  3003                     172      move.w d3, d0
00000120                           173  .postMove
00000120  3740 0000                174      move.w d0, CHAR_X_POS_OFFSET(a3)
00000124                           175      
00000124                           176      * check if the character is grounded
00000124                           177      * get the character height
00000124  3028 0016                178      move.w CHAR_HEIGHT_OFFSET(a0), d0
00000128                           179      * calculate the grounded y position
Line 180 ERROR: Undefined symbol
00000128  363C BD16                180      move.w #FLOOR, d3
0000012C  9640                     181      sub.w d0, d3
0000012E  B66B 0002                182      cmp.w CHAR_Y_POS_OFFSET(a3), d3
00000132  6600 0018                183      bne .gravity
00000136                           184      
00000136                           185      * check for a jump input
00000136  2401                     186      move.l d1, d2
00000138  0282 00FF0000            187      andi.l #$00FF0000, d2
0000013E  6700 0012                188      beq .postJump
00000142                           189      * give the character vertical velocity
00000142  377C 0077 0006           190      move.w #CHAR_JUMP_SPEED, CHAR_Y_VEL_OFFSET(a3)
00000148  6000 0008                191      bra .postJump
0000014C                           192      * accelerates the character downward if they are not grounded
0000014C                           193  .gravity
0000014C                           194      * subtract the gravity constant to the character velocity
Line 195 ERROR: Undefined symbol
0000014C  046B BD16 0006           195      sub.w #GRAVITY, CHAR_Y_VEL_OFFSET(a3)
00000152                           196  .postJump
00000152                           197      * update the character's position, adjusted for floating point math (12.4 format)
00000152  302B 0004                198      move.w CHAR_FP_Y_POS_OFFSET(a3), d0
00000156  906B 0006                199      sub.w CHAR_Y_VEL_OFFSET(a3), d0
0000015A                           200      * check for floor collision
0000015A  E94B                     201      lsl.w #4, d3
0000015C  B043                     202      cmp.w d3, d0
0000015E  6D00 000A                203      blt .aboveFloor
00000162  3003                     204      move.w d3, d0
00000164  377C 0000 0006           205      move.w #0, CHAR_Y_VEL_OFFSET(a3)
0000016A                           206  .aboveFloor
0000016A  3740 0004                207      move.w d0, CHAR_FP_Y_POS_OFFSET(a3)
0000016E                           208      * add 1 to the first fractional bit and bitshift to round
0000016E  5040                     209      add.w #8, d0
00000170  E848                     210      lsr.w #4, d0
00000172  3740 0002                211      move.w d0, CHAR_Y_POS_OFFSET(a3)
00000176  4CDF 001C                212      movem.l (sp)+, .REGS
0000017A  4E75                     213      rts
0000017C                           214  
0000017C                           215  
0000017C                           216  
0000017C                           217  
0000017C                           218  
0000017C                           219  
Line 220 WARNING: END directive missing, starting address not set

11 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHAR_ART_ADDR_OFFSET  12
CHAR_A_KEY          41
CHAR_CENTER_X_OFFSET  E
CHAR_CENTER_Y_OFFSET  10
CHAR_CREATECHAR     0
CHAR_CREATECHAR:DONE  70
CHAR_CREATECHAR:ERROR  6C
CHAR_CREATECHAR:REGS  400
CHAR_DRAW           A0
CHAR_DRAW:REGS      1C
CHAR_D_KEY          44
CHAR_ERASE          76
CHAR_ERASE:REGS     1C
CHAR_FP_Y_POS_OFFSET  4
CHAR_HALF_HEIGHT_OFFSET  A
CHAR_HALF_WIDTH_OFFSET  C
CHAR_HEIGHT_OFFSET  16
CHAR_JUMP_SPEED     77
CHAR_LIFE_OFFSET    8
CHAR_MOVE           C8
CHAR_MOVE:ABOVEFLOOR  16A
CHAR_MOVE:GRAVITY   14C
CHAR_MOVE:POSTJUMP  152
CHAR_MOVE:POSTLEFT  10A
CHAR_MOVE:POSTMOVE  120
CHAR_MOVE:REGS      1C
CHAR_MOVE_SPEED     3
CHAR_SIZE           16
CHAR_WIDTH_OFFSET   12
CHAR_W_KEY          57
CHAR_X_POS_OFFSET   0
CHAR_Y_POS_OFFSET   2
CHAR_Y_VEL_OFFSET   6
GET_USER_INPUT      13
